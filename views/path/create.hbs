<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
    <title>Places Search Box</title>
    <style>
      .hidden{
        display: none;
      }
    </style>
  </head>
  <body>
    <h6>Search for places on Google Maps to start adding experiences to your route</h6>

    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map" class="col-8" style="float: right;"></div>
    <div class="col-4 controls">
    <div class="form-style">
    
    <form method="post" id="markerList" enctype="multipart/form-data">
      <label for="name" id="firstlabel">Name:</label>
      <input type="text" placeholder="Name of your Path" name="name" maxlength="30">
      <label for="input-photos">Picture:</label>
      <input type="file" name="picture" id="input-photos" accept="image/*"/>
      <label for="type">Choose a theme:</label>
      <select id="type" name="type">
        <option value="Gastronomic">Gastronomic</option>
        <option value="Cultural">Cultural</option>
        <option value="Country">Country</option>
        <option value="City">City</option>
        <option value="Sea">Sea</option>
        <option value="Sport">Sport</option>
        <option value="Romantic">Romantic</option>
        <option value="Fun">Fun</option>
        <option value="Party">Party</option>
        <option value="Wildlife">Wildlife</option>
        <option value="Shopping">Shopping</option>
        <option value="Animals">Animals</option>
      </select>

      <label for="description">Describe:</label>
      <textarea id="description" name="description" maxlength="700"></textarea>
      <label for="duration">Approximate duration</label>
      <input id="duration" type="time" name="duration" value="00:00">
      <div id="submit-create">
      <button>Submit Experience!</button>
      </div>
    </form>
    </div>
    </div>



   
   
    <script>
      function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 38.709025, lng: -9.1373922},
          zoom: 13,
          mapTypeId: 'roadmap'
        });
        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });
        let markerList = document.getElementById('firstlabel');
        var markers = [];
        var permanentMarkers = [];
        // Listen for the event fired when the user selects a prediction and retrieve more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();
          if (places.length == 0) {
            return;
          }
          // Clear out the old markers.
        markers.forEach(function(marker) {
          marker.setMap(null);
         });
          markers = [];
          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };
            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));
             permanentMarkers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            markers.map(element =>{
              markerList.insertAdjacentHTML("beforebegin", `<input type="text" id="experience-map" placeholder="location" name="title" value="${element.title} &#x1F4CD">`) 
              markerList.insertAdjacentHTML("beforebegin", `<input type="number" class="hidden" step="0.000000000000001" placeholder="location" name="lat" value="${element.position.lat()}">`)
              markerList.insertAdjacentHTML("beforebegin", `<input type="number" class="hidden" step="0.000000000000001" placeholder="location" name="lng" value="${element.position.lng()}">`)
            }); 
        

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key={{google}}&libraries=places&callback=initAutocomplete"
         async defer></script>
  </body>
</html>